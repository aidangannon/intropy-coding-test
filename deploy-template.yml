AWSTemplateFormatVersion: '2010-09-09'
Description: Metrics stack

Parameters:
  DBUsername:
    Type: String
    Default: postgres

  DBPassword:
    Type: String
    NoEcho: true

  KeyName:
    Type: String

  DBName:
    Type: String
    Default: intropy_metrics_db

  DomainName:
    Type: String
    Default: aphextwinning.com

  RegistrarEmail:
    Type: String
    Default: aidanwilliamgannon@gmail.com

  DBPort:
    Type: String
    Default: "5432"

  LatestAmazonLinux2AMI:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true

  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Sub "${AWS::Region}b"
      MapPublicIpOnLaunch: true

  RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub "${DomainName}."
      Name: !Ref DomainName
      Type: A
      TTL: 300
      ResourceRecords:
        - !Ref EC2EIP

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachIGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  RouteToInternet:
    Type: AWS::EC2::Route
    DependsOn: AttachIGW
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetA
      RouteTableId: !Ref RouteTable

  SubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetB
      RouteTableId: !Ref RouteTable

  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Minimal RDS subnet group
      SubnetIds:
        - !Ref SubnetA
        - !Ref SubnetB

  SGEC2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP (port 80) and SSH (port 22) to EC2
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          # defined below are only GitHub actions agent public ip ranges allowed for ssh
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  SGRDS:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow Postgres from EC2 only
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref SGEC2

  PostgresDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: db.t3.micro
      Engine: postgres
      AllocatedStorage: 20
      Port: !Ref DBPort
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DBName: !Ref DBName
      VPCSecurityGroups:
        - !Ref SGRDS
      DBSubnetGroupName: !Ref RDSSubnetGroup
      PubliclyAccessible: true
      BackupRetentionPeriod: 0
      DeletionProtection: false

  EC2EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  EC2EIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt EC2EIP.AllocationId
      InstanceId: !Ref EC2Instance

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      KeyName: !Ref KeyName
      ImageId: !Ref LatestAmazonLinux2AMI
      SubnetId: !Ref SubnetA
      SecurityGroupIds:
        - !Ref SGEC2
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          set -eux
          
          yum update -y
          amazon-linux-extras install docker -y
          amazon-linux-extras enable nginx1
          yum clean metadata
          yum install -y nginx
          
          usermod -aG docker ec2-user
          
          systemctl enable docker
          systemctl start docker

          systemctl enable nginx
          systemctl start nginx
      
          echo 'DATABASE_URL=postgresql+asyncpg://${DBUsername}:${DBPassword}@${PostgresDB.Endpoint.Address}:${DBPort}/${DBName}' > /home/ec2-user/fastapi.env
      
          cat << EOF > /etc/nginx/conf.d/fastapi.conf
          server {
              listen 80;
              server_name ${DomainName};
              return 301 https://\$host\$request_uri;
          }
      
          server {
              listen 443 ssl;
              server_name ${DomainName};
      
              ssl_certificate /etc/letsencrypt/live/${DomainName}/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/${DomainName}/privkey.pem;
      
              location / {
                  proxy_pass http://localhost:8000;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
              }
          }
          EOF
      
          amazon-linux-extras enable epel -y
          yum install -y certbot python2-certbot-nginx
      
          certbot --nginx -d ${DomainName} --non-interactive --agree-tos -m ${RegistrarEmail}
      
          echo "0 0 * * * root certbot renew --quiet" >> /etc/crontab

Outputs:
  EC2PublicIP:
    Description: EC2 static public IP
    Value: !Ref EC2EIP

  RDSEndpoint:
    Description: RDS Endpoint
    Value: !GetAtt PostgresDB.Endpoint.Address
