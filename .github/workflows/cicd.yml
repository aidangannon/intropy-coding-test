name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout head
        uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v2
        with:
          python-version: "3.11"
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Install dependencies with Poetry
        run: |
          poetry config virtualenvs.create false
          poetry install --no-interaction --no-ansi
      - name: Run tests with pytest
        run: |
          set -a
          source .env.local
          set +a
          poetry run python -m unittest discover -s tests
      - name: Deploy SAM app
        env:
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          AWS_REGION: eu-west-2
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          STACK_NAME: metrics-api-prod
        run: |
          sam deploy \
            --no-fail-on-empty-changeset \
            --template-file deploy-template.yml \
            --stack-name $STACK_NAME \
            --s3-bucket metrics-api-prod-s3 \
            --s3-prefix metrics \
            --region $AWS_REGION \
            --capabilities CAPABILITY_IAM \
            --parameter-overrides DBPassword=$DB_PASSWORD KeyName=intropy-ec2-keypair $REBUILD_PARAM \
            --no-confirm-changeset
          INSTANCE_ID=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --region $AWS_REGION \
            --query "Stacks[0].Outputs[?OutputKey=='EC2InstanceID'].OutputValue" \
            --output text)
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          USER_POOL_ID=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --region $AWS_REGION \
            --query "Stacks[0].Outputs[?OutputKey=='UserPoolId'].OutputValue" \
            --output text)
          echo "USER_POOL_ID=$USER_POOL_ID" >> $GITHUB_ENV
          USER_POOL_CLIENT_ID=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --region $AWS_REGION \
            --query "Stacks[0].Outputs[?OutputKey=='UserPoolClientId'].OutputValue" \
            --output text)
          echo "USER_POOL_CLIENT_ID=$USER_POOL_CLIENT_ID" >> $GITHUB_ENV
          echo "AWS_REGION=$AWS_REGION" >> $GITHUB_ENV
      - name: Setup SSH key
        run: |
          echo "${{ secrets.EC2_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem
      - name: Setup known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
      - name: Clean remote app folder
        run: |
          ssh -i ec2_key.pem ec2-user@${{ secrets.EC2_HOST }} "rm -rf ~/app/*"
      - name: Copy code to EC2
        run: |
          scp -i ec2_key.pem -r ./* ec2-user@${{ secrets.EC2_HOST }}:~/app/
      - name: Check env vars before SSH
        run: |
          echo "INSTANCE_ID=${{ env.INSTANCE_ID }}"
          echo "COMMIT_MSG=${{ github.event.head_commit.message }}"
      - name: Deploy Docker app on EC2
        uses: appleboy/ssh-action@v0.1.7
        env:
          INSTANCE_ID: ${{ env.INSTANCE_ID }}
          COMMIT_MSG: ${{ github.event.head_commit.message }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_KEY }}
          script: |
            export INSTANCE_ID="${{ env.INSTANCE_ID }}"
            export USER_POOL_ID="${{ env.USER_POOL_ID }}"
            export AWS_REGION="${{ env.AWS_REGION }}"
            export USER_POOL_CLIENT_ID="${{ env.USER_POOL_CLIENT_ID }}"
            export COMMIT_MSG="${{ github.event.head_commit.message }}"
      
            echo "COMMIT_MSG: $COMMIT_MSG"
            echo "INSTANCE_ID: $INSTANCE_ID"
            
            env | grep INSTANCE
            env | grep COMMIT
            
            if [[ "$COMMIT_MSG" == *"--ec2init" ]]; then
              echo "Commit ends with --ec2init, running user-data script..."
              sudo bash -x /var/lib/cloud/instances/$INSTANCE_ID/user-data.txt
            else
              echo "Commit does not end with --ec2init, skipping user-data script."
            fi
            
            set -e
            cd ~/app || mkdir ~/app && cd ~/app
            docker build -t myfastapiapp .
            if [ "$(docker ps -q -f name=myfastapiapp)" ]; then
              docker stop myfastapiapp
              docker rm myfastapiapp
            fi
            
            grep -qxF 'QUERIES_SEED_CSV=/app/data/queries.csv' /home/ec2-user/fastapi.env || \
            echo 'QUERIES_SEED_CSV=/app/data/queries.csv' | sudo tee -a /home/ec2-user/fastapi.env
            
            grep -qxF "USER_POOL_ID=$USER_POOL_ID" /home/ec2-user/fastapi.env || \
            echo "USER_POOL_ID=$USER_POOL_ID" | sudo tee -a /home/ec2-user/fastapi.env
            
            grep -qxF "USER_POOL_CLIENT_ID=$USER_POOL_CLIENT_ID" /home/ec2-user/fastapi.env || \
            echo "USER_POOL_CLIENT_ID=$USER_POOL_CLIENT_ID" | sudo tee -a /home/ec2-user/fastapi.env
            
            grep -qxF "AWS_REGION=$AWS_REGION" /home/ec2-user/fastapi.env || \
            echo "AWS_REGION=$AWS_REGION" | sudo tee -a /home/ec2-user/fastapi.env
            
            grep -qxF 'QUERIES_SEED_CSV=/app/data/queries.csv' /home/ec2-user/fastapi.env || \
            echo 'QUERIES_SEED_CSV=/app/data/queries.csv' | sudo tee -a /home/ec2-user/fastapi.env
            
            grep -qxF 'METRICS_SEED_JSON=/app/data/metrics.json' /home/ec2-user/fastapi.env || \
            echo 'METRICS_SEED_JSON=/app/data/metrics.json' | sudo tee -a /home/ec2-user/fastapi.env
            
            grep -qxF 'METRIC_RECORDS_SEED_JSON=/app/data/metric_records.json' /home/ec2-user/fastapi.env || \
            echo 'METRIC_RECORDS_SEED_JSON=/app/data/metric_records.json' | sudo tee -a /home/ec2-user/fastapi.env
            
            docker run --rm --env-file /home/ec2-user/fastapi.env myfastapiapp poetry run alembic heads
            
            docker run --rm --env-file /home/ec2-user/fastapi.env myfastapiapp poetry run alembic upgrade head
            
            docker run -d --restart unless-stopped --name myfastapiapp --env-file /home/ec2-user/fastapi.env -p 8000:8000 --log-driver awslogs --log-opt awslogs-group=/my-app/fastapi myfastapiapp